{"@ID": "1221", "@Name": "Incorrect Register Defaults or Module Parameters", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.", "Extended_Description": {"xhtml:p": ["Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.", "The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive."]}, "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "665", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Applicable_Platforms": {"Language": [{"@Name": "Verilog", "@Prevalence": "Undetermined"}, {"@Name": "VHDL", "@Prevalence": "Undetermined"}], "Technology": {"@Class": "Not Technology-Specific", "@Prevalence": "Undetermined"}}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation", "Note": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."}}, "Common_Consequences": {"Consequence": {"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": "Varies by Context", "Note": "Degradation of system functionality, or loss of access control enforcement can occur."}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Architecture and Design", "Description": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings."}, {"Phase": "Implementation", "Description": "The default values of these security sensitive settings need to be defined as part of the design review phase."}, {"Phase": "Testing", "Description": "Testing phase should use automated tools to test that values are configured per design specifications."}]}, "Demonstrative_Examples": {"Demonstrative_Example": {"Intro_Text": "Consider example design module system verilog code shown below.register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values.", "Example_Code": [{"@Nature": "Bad", "@Language": "Verilog", "xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "Data_out <= REGISTER_DEFAULT; // Register content set to Default at reset \n\t\t\t    Secure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "Data_out <= Data_in;"}], "#text": "if (~resetn) \n\t\t\t  begin \n\t\t\t  \n\t\t\t  end \n\t\t\t  else if (write & ~Secure_mode) \n\t\t\t  begin \n\t\t\t  \n\t\t\t  end"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": ".REGISTER_WIDTH (32), \n\t\t\t  .REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0."}, {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null], "#text": ".Data_in (Data_in), \n\t\t\t  .Data_out (Secure_reg), \n\t\t\t  .Clk (Clk), \n\t\t\t  .resetn (resetn), \n\t\t\t  .write (write)"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": ".REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default."}, {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null], "#text": ".Data_in (Data_in), \n\t\t\t  .Data_out (Insecure_reg), \n\t\t\t  .Clk (Clk), \n\t\t\t  .resetn (resetn), \n\t\t\t  .write (write)"}], "#text": "// Parameterized Register module example \n\t\t\t// Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// \n\t\t\tmodule register_example \n\t\t\t#( \n\t\t\tparameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits \n\t\t\tparameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) \n\t\t\t) \n\t\t\t( \n\t\t\tinput [REGISTER_WIDTH-1:0] Data_in, \n\t\t\tinput Clk, \n\t\t\tinput resetn, \n\t\t\tinput write, \n\t\t\toutput reg [REGISTER_WIDTH-1:0] Data_out \n\t\t\t); \n\t\t\t\n\t\t\treg Secure_mode; \n\t\t\t\n\t\t\talways @(posedge Clk or negedge resetn) \n\t\t\t\n\t\t\tendmodule \n                        \n                        \n\t\t\tmodule register_top \n\t\t\t( \n\t\t\tinput Clk, \n\t\t\tinput resetn, \n\t\t\tinput write, \n\t\t\tinput [31:0] Data_in, \n\t\t\toutput reg [31:0] Secure_reg, \n\t\t\toutput reg [31:0] Insecure_reg \n\t\t\t); \n\t\t\t\n\t\t\tregister_example #( \n\t\t\t\n\t\t\t) Insecure_Device_ID_1 ( \n\t\t\t\n\t\t\t); \n                        \n\t\t\tregister_example #(\n\t\t\t\n\t\t\t) Insecure_Device_ID_2 ( \n\t\t\t\n\t\t\t); \n                        \n\t\t\tendmodule"}, {"@Nature": "Good", "@Language": "Verilog", "xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": ".REGISTER_WIDTH (32), \n\t\t\t.REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null], "#text": ".Data_in (Data_in), \n\t\t\t.Data_out (Secure_reg), \n\t\t\t.Clk (Clk), \n\t\t\t.resetn (resetn), \n\t\t\t.write (write)"}], "#text": "register_example #( \n\t\t      \n\t\t      ) Secure_Device_ID_example ( \n\t\t      \n\t\t      );"}], "Body_Text": ["These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters.", "In the example design, both registers will be software writable since Secure_mode is defined as zero."]}}, "Related_Attack_Patterns": {"Related_Attack_Pattern": {"@CAPEC_ID": "166"}}, "Content_History": {"Submission": {"Submission_Name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi", "Submission_Organization": "Intel Corporation", "Submission_Date": "2019-12-12"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-10-28", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Relationships"}]}}