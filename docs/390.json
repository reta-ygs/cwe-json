{"cwe": {"@ID": "390", "@Name": "Detection of Error Condition Without Action", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Draft", "Description": "The product detects a specific error, but takes no actions to handle the error.", "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "755", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "CanPrecede", "@CWE_ID": "401", "@View_ID": "1000"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}}, "Likelihood_Of_Exploit": "Medium", "Common_Consequences": {"Consequence": {"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State", "Alter Execution Logic"], "Note": "An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior."}}, "Detection_Methods": {"Detection_Method": {"@Detection_Method_ID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Implementation", "Description": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."}, {"Phase": "Implementation", "Description": "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program."}, {"Phase": "Testing", "Description": "Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "#text": "//We do nothing so we just ignore the error."}, "#text": "foo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Malloc failed to allocate memory resources\");return -1;"}, "#text": "foo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {}"}}], "Body_Text": ["The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate.", "Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code."]}, {"Intro_Text": "In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed.", "Example_Code": [{"@Nature": "Bad", "@Language": "C++", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "#text": "throw \"Unable to open file \" + filename;"}, {"@style": "margin-left:1em;", "#text": "throw \"Unable to read from file \" + filename;"}], "#text": "// open input fileifstream infile;infile.open(filename);\n                                 if (!infile.is_open()) {}\n                                 // get length of fileinfile.seekg (0, ios::end);int length = infile.tellg();infile.seekg (0, ios::beg);\n                                 // allocate memorychar *buffer = new char [length];\n                                 // read data from fileinfile.read (buffer,length);\n                                 if (!infile.good()) {}\n                                 infile.close();\n                                 return buffer;"}}, {"@style": "margin-left:1em;", "#text": "/* bug: insert code to handle this later */"}], "xhtml:br": null, "#text": "try {}catch (...) {}"}}, "#text": "char* readfile (char *filename) {}"}}, {"@Nature": "Good", "@Language": "C++", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "#text": "throw \"Unable to open file \" + filename;"}, {"@style": "margin-left:1em;", "#text": "throw \"Unable to read from file \" + filename;"}], "#text": "// open input fileifstream infile;infile.open(filename);\n                                 if (!infile.is_open()) {}\n                                 // get length of fileinfile.seekg (0, ios::end);int length = infile.tellg();infile.seekg (0, ios::beg);\n                                 // allocate memorychar *buffer = new char [length];\n                                 // read data from fileinfile.read (buffer,length);\n                                 if (!infile.good()) {}infile.close();\n                                 return buffer;"}}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "printf(\"Error: %s \\n\", str);infile.close();throw str;"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "printf(\"Error occurred trying to read from file \\n\");infile.close();throw;"}], "xhtml:br": [null, null], "#text": "try {}catch (char *str) {}catch (...) {}"}}, "#text": "char* readFile (char *filename) {}"}}], "Body_Text": "The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program."}, {"Intro_Text": "In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String.", "Example_Code": [{"@Nature": "Bad", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "#text": "// initialize File and FileReader objectsFile file = new File(filename);FileReader fr = new FileReader(file);\n                                 // initialize character bufferlong fLen = file.length();char[] cBuf = new char[(int) fLen];\n                                 // read data from fileint iRead = fr.read(cBuf, 0, (int) fLen);\n                                 // close filefr.close();\n                                 retString = new String(cBuf);"}}, {"@style": "margin-left:1em;", "#text": "/* do nothing, but catch so it'll compile... */"}], "#text": "String retString = null;try {} catch (Exception ex) {}return retString;"}}, "#text": "public String readFile(String filename) {}"}}, {"@Nature": "Good", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "#text": "// initialize File and FileReader objectsFile file = new File(filename);FileReader fr = new FileReader(file);\n                                 // initialize character bufferlong fLen = file.length();char [] cBuf = new char[(int) fLen];\n                                 // read data from fileint iRead = fr.read(cBuf, 0, (int) fLen);\n                                 // close filefr.close();\n                                 retString = new String(cBuf);"}}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "System.err.println (\"Error: FileNotFoundException opening the input file: \" + filename );System.err.println (\"\" + ex.getMessage() );throw new FileNotFoundException(ex.getMessage());"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "System.err.println(\"Error: IOException reading the input file.\\n\" + ex.getMessage() );throw new IOException(ex);"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "System.err.println(\"Error: Exception reading the input file.\\n\" + ex.getMessage() );throw new Exception(ex);"}], "#text": "String retString = null;try {} catch (FileNotFoundException ex) {} catch (IOException ex) {} catch (Exception ex) {}return retString;"}}, "#text": "public String readFile(String filename) throws FileNotFoundException, IOException, Exception {}"}}], "Body_Text": "The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised."}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "CLASP", "Entry_Name": "Improper error handling"}, {"@Taxonomy_Name": "The CERT Oracle Secure Coding Standard for Java (2011)", "Entry_ID": "ERR00-J", "Entry_Name": "Do not suppress or ignore checked exceptions"}, {"@Taxonomy_Name": "Software Fault Patterns", "Entry_ID": "SFP4", "Entry_Name": "Unchecked Status Condition"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-18"}, {"@External_Reference_ID": "REF-44", "@Section": "\"Sin 11: Failure to Handle Errors Correctly.\" Page 183"}]}, "Content_History": {"Submission": {"Submission_Name": "CLASP", "Submission_Date": "2006-07-19"}, "Modification": [{"Modification_Name": "Eric Dalci", "Modification_Organization": "Cigital", "Modification_Date": "2008-07-01", "Modification_Comment": "updated Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-09-08", "Modification_Comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-11-24", "Modification_Comment": "updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-03-10", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-07-27", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-27", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-09-13", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Common_Consequences, References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-02-18", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated Related_Attack_Patterns, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated References, Type"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Detection_Factors, Relationships, Time_of_Introduction"}], "Previous_Entry_Name": {"@Date": "2008-04-11", "#text": "Improper Error Handling"}}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}