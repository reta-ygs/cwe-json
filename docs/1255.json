{"@ID": "1255", "@Name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks", "@Abstraction": "Variant", "@Structure": "Simple", "@Status": "Draft", "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.", "Extended_Description": {"xhtml:p": "The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value."}, "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "1300", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "PeerOf", "@CWE_ID": "1259", "@View_ID": "1194", "@Ordinal": "Primary"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}, "Operating_System": {"@Class": "Not OS-Specific", "@Prevalence": "Undetermined"}, "Architecture": {"@Class": "Not Architecture-Specific", "@Prevalence": "Undetermined"}, "Technology": {"@Class": "Not Technology-Specific", "@Prevalence": "Undetermined"}}, "Modes_Of_Introduction": {"Introduction": [{"Phase": "Architecture and Design", "Note": "The design of the algorithm itself may intrinsically allow the power side channel attack to be effective"}, {"Phase": "Implementation", "Note": "This weakness may be introduced during implementation despite a robust design that otherwise prevents exploitation"}]}, "Common_Consequences": {"Consequence": {"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Modify Memory", "Read Memory", "Read Files or Directories", "Modify Files or Directories", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Read Application Data", "Modify Application Data", "Hide Activities"], "Note": "As compromising a security token may result in complete system control, the impacts are relatively universal"}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Architecture and Design", "Description": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check."}, {"Phase": "Architecture and Design", "Description": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result."}, {"Phase": "Architecture and Design", "Description": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator."}, {"Phase": "Implementation", "Description": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements."}, {"Phase": "Integration", "Description": "During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "Consider an example hardware module that checks a user-provided password (or PIN) to grant access to a user. The user-provided password is compared against a stored value byte-by-byte.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:br": [null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "password_ok |= 1; // Power consumption is different here"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "password_ok |= 0; // than from here"}], "#text": "if (GetPasswordByte() == stored_password([i])\n\t       \n               else"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "password_tries = NUM_RETRIES;\n               break_to_Ok_to_proceed"}], "#text": "while (password_tries == 0) ; // Hang here if no more password tries\n             password_ok = 0;\n             for (i = 0; i < NUM_PW_DIGITS; i++)\n\t     \n             end\n             if (password_ok > 0)\n\t     \n             password_tries--;"}, "#text": "static nonvolatile password_tries = NUM_RETRIES;\n           do\n\t   \n           while (true)\n           // Password OK"}, {"@Nature": "Good", "@Language": "C", "xhtml:br": [null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "password_ok |= 0x10; // Power consumption here"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "password_ok |= 0x01; // is now the same here"}], "#text": "if (GetPasswordByte() == stored_password([i])\n\t       \n               else"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "password_tries = NUM_RETRIES;\n               break_to_Ok_to_proceed"}], "#text": "while (password_tries == 0) ; // Hang here if no more password tries\n             password_tries--;  // Put retry code here to catch partial retries\n             password_ok = 0;\n             for (i = 0; i < NUM_PW_DIGITS; i++)\n\t     \n             end\n             if ((password_ok & 1) == 0)"}, "#text": "static nonvolatile password_tries = NUM_RETRIES;\n           do\n\t   \n           while (true)\n           // Password OK"}, {"@Nature": "Good", "@Language": "C", "xhtml:br": [null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "stored_password([i]) = GetPasswordByte();"}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "password_tries = NUM_RETRIES;\n               break_to_Ok_to_proceed"}], "#text": "while (password_tries == 0) ; // Hang here if no more password tries\n             password_tries--;  // Put retry code here to catch partial retries\n             for (i = 0; i < NUM_PW_DIGITS; i++)\n\t     \n             end\n             if (stored_password == saved_password)"}, "#text": "static nonvolatile password_tries = NUM_RETRIES;\n           do\n\t   \n           while (true)\n           // Password OK"}], "Body_Text": ["Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes.", "Among various options for mitigating the string comparison is obscuring the power consumption by having opposing bit flips during bit operations. Note that in this example, the initial change of the bit values could still provide power indication depending upon the hardware itself. This possibility needs to be measured for verification.", "Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes.", "An alternative to the previous example is simply comparing the whole password simultaneously.", "Since comparison is done atomically, there is no indication which bytes fail forcing the attacker to brute force the whole password at once. Note that other mitigations may exist such as masking - causing a large current draw to mask individual bit flips."]}, {"Intro_Text": "This code demonstrates the transfer of a secret key using Serial-In/Serial-Out shift. It's easy to extract the secret using simple power analysis as each shift gives data on a single bit of the key.", "Example_Code": [{"@Nature": "Bad", "@Language": "Verilog", "xhtml:br": [null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "q<1'b0;"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "q<a;"}], "#text": "if(rst==1'b1)\n\t\t\n\t\telse"}, "#text": "input a;\n              input clk,rst;\n              output q;\n              reg q;\n              \n              always@(posedge clk,posedge rst)\n              begin\n\t      \n              end"}, "#text": "module siso(clk,rst,a,q);\n\t    \n            endmodule"}, {"@Nature": "Good", "@Language": "Verilog", "xhtml:br": [null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "q<4'b0000;"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "q<a;"}], "#text": "if (rst==1'b1)\n\t       \n               else"}, "#text": "input clk,rst;\n             input[3:0]a;\n             output[3:0]q;\n             reg[3:0]q;\n             \n             always@(posedge clk,posedge rst)\n             begin\n\t     \n             end"}, "#text": "module pipo(clk,rst,a,q);\n\t   \n           endmodule"}], "Body_Text": "This code demonstrates the transfer of a secret key using a Parallel-In/Parallel-Out shift. In a parallel shift, data confounded by multiple bits of the key, not just one."}]}, "Observed_Examples": {"Observed_Example": {"Reference": "CVE-2020-12788", "Description": "CMAC verification vulnerable to timing and power attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12788"}}, "Functional_Areas": {"Functional_Area": "Power"}, "Related_Attack_Patterns": {"Related_Attack_Pattern": {"@CAPEC_ID": "189"}}, "References": {"Reference": {"@External_Reference_ID": "REF-1184"}}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2020-05-29"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Functional_Areas, Maintenance_Notes, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Demonstrative_Examples, Modes_of_Introduction, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-10-28", "Modification_Comment": "updated Maintenance_Notes, References, Relationships, Type"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-06-28", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Relationships"}], "Contribution": {"@Type": "Content", "Contribution_Name": "Accellera IP Security Assurance (IPSA) Working Group", "Contribution_Organization": "Accellera Systems Initiative", "Contribution_Date": "2020-09-09", "Contribution_Comment": "Submitted new material that could be added to already-existing entry CWE-1255. Added new Potential Mitigations, a new example, an observed example, and an additional reference."}}}