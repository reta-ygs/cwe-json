{"cwe": {"@ID": "364", "@Name": "Signal Handler Race Condition", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product uses a signal handler that introduces a race condition.", "Extended_Description": {"xhtml:p": ["Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution.", "These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the \"regular\" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.", "There are several known behaviors related to signal handlers that have received the label of \"signal handler race condition\":", "Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:"], "xhtml:ul": [{"xhtml:li": ["Shared state (e.g. global data or static variables) that are accessible to both a signal handler and \"regular\" code", "Shared state between a signal handler and other signal handlers", "Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution.", "Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses.", "Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality", "While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses."]}, {"xhtml:li": ["Avoiding shared state", "Using synchronization in the signal handler", "Using synchronization in the regular code", "Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)"]}]}, "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "362", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "CanPrecede", "@CWE_ID": "415", "@View_ID": "1000"}, {"@Nature": "CanPrecede", "@CWE_ID": "416", "@View_ID": "1000"}, {"@Nature": "CanPrecede", "@CWE_ID": "123", "@View_ID": "1000"}]}, "Applicable_Platforms": {"Language": [{"@Name": "C", "@Prevalence": "Sometimes"}, {"@Name": "C++", "@Prevalence": "Sometimes"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Likelihood_Of_Exploit": "Medium", "Common_Consequences": {"Consequence": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Application Data", "Modify Memory", "DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands"], "Note": "It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data."}, {"Scope": "Access Control", "Impact": "Gain Privileges or Assume Identity", "Note": "If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe."}]}, "Potential_Mitigations": {"Mitigation": [{"@Mitigation_ID": "MIT-3", "Phase": "Requirements", "Strategy": "Language Selection", "Description": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."}, {"Phase": "Architecture and Design", "Description": "Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop."}, {"Phase": "Implementation", "Description": "Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"@Demonstrative_Example_ID": "DX-26", "Intro_Text": "This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:i": "/* artificially increase the size of the timing window to make demonstration of this weakness easier. */", "#text": "syslog(LOG_NOTICE, \"%s\\n\", logMessage);free(logMessage);\n                           \n                           \n                           sleep(10);exit(0);"}}, {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null], "xhtml:i": ["/* Register signal handlers. */", "/* artificially increase the size of the timing window to make demonstration of this weakness easier. */"], "#text": "logMessage = strdup(argv[1]);\n                           \n                           \n                           signal(SIGHUP, handler);signal(SIGTERM, handler);\n                           \n                           \n                           sleep(10);"}}], "#text": "char *logMessage;\n                     void handler (int sigNum) {}\n                     int main (int argc, char* argv[]) {}"}}, "Body_Text": ["The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:", {"xhtml:ul": {"xhtml:li": [{"xhtml:div": "The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM."}, {"xhtml:div": "The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time."}, {"xhtml:div": "The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\")."}, {"xhtml:div": "SIGHUP-handler begins to execute, calling syslog()."}, {"xhtml:div": "syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap."}, {"xhtml:div": "The attacker then sends SIGTERM."}, {"xhtml:div": "SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata."}, {"xhtml:div": "The SIGTERM handler is invoked."}, {"xhtml:div": "SIGTERM-handler records the log message using syslog(), then frees the logMessage variable."}]}}, "At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running.", "Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution.", "Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array."]}, {"@Demonstrative_Example_ID": "DX-48", "Intro_Text": "The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null], "xhtml:i": "/* Sleep statements added to expand timing window for race condition */", "#text": "syslog(LOG_NOTICE,\"%s\\n\",what);free(global2);free(global1);\n                           \n                           \n                           sleep(10);exit(0);"}}, {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null], "xhtml:i": "/* Sleep statements added to expand timing window for race condition */", "#text": "what=argv[1];global1=strdup(argv[2]);global2=malloc(340);signal(SIGHUP,sh);signal(SIGTERM,sh);\n                           \n                           \n                           sleep(10);exit(0);"}}], "#text": "#include <signal.h>#include <syslog.h>#include <string.h>#include <stdlib.h>\n                     void *global1, *global2;char *what;void sh (int dummy) {}\n                     int main (int argc,char* argv[]) {}"}}, "Body_Text": ["However, the following sequence of events may result in a double-free (CWE-415):", {"xhtml:ol": {"xhtml:li": [{"xhtml:div": "a SIGHUP is delivered to the process"}, {"xhtml:div": "sh() is invoked to process the SIGHUP"}, {"xhtml:div": "This first invocation of sh() reaches the point where global1 is freed"}, {"xhtml:div": "At this point, a SIGTERM is sent to the process"}, {"xhtml:div": "the second invocation of sh() might do another free of global1"}, {"xhtml:div": "this results in a double-free (CWE-415)"}]}}, "This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within \"Delivering Signals for Fun and Profit\" [REF-360]."]}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-1999-0035", "Description": "Signal handler does not disable other signal handlers, allowing it to be interrupted, causing other functionality to access files/etc. with raised privileges", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0035"}, {"Reference": "CVE-2001-0905", "Description": "Attacker can send a signal while another signal handler is already running, leading to crash or execution with root privileges", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0905"}, {"Reference": "CVE-2001-1349", "Description": "unsafe calls to library functions from signal handler", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1349"}, {"Reference": "CVE-2004-0794", "Description": "SIGURG can be used to remotely interrupt signal handler; other variants exist", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0794"}, {"Reference": "CVE-2004-2259", "Description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"}]}, "Functional_Areas": {"Functional_Area": ["Signals", "Interprocess Communication"]}, "Affected_Resources": {"Affected_Resource": "System Process"}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "PLOVER", "Entry_Name": "Signal handler race condition"}, {"@Taxonomy_Name": "7 Pernicious Kingdoms", "Entry_Name": "Signal Handling Race Conditions"}, {"@Taxonomy_Name": "CLASP", "Entry_Name": "Race condition in signal handler"}, {"@Taxonomy_Name": "Software Fault Patterns", "Entry_ID": "SFP19", "Entry_Name": "Missing Lock"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-18"}, {"@External_Reference_ID": "REF-360"}, {"@External_Reference_ID": "REF-361"}, {"@External_Reference_ID": "REF-44", "@Section": "\"Sin 13: Race Conditions.\" Page 205"}, {"@External_Reference_ID": "REF-62", "@Section": "Chapter 13, \"Signal Vulnerabilities\", Page 791"}]}, "Content_History": {"Submission": {"Submission_Name": "PLOVER", "Submission_Date": "2006-07-19"}, "Modification": [{"Modification_Name": "Eric Dalci", "Modification_Organization": "Cigital", "Modification_Date": "2008-07-01", "Modification_Comment": "updated Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-09-08", "Modification_Comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-09-27", "Modification_Comment": "updated Observed_Examples, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-12-13", "Modification_Comment": "updated Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Demonstrative_Examples, References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-06-23", "Modification_Comment": "updated Demonstrative_Examples, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Observed_Examples, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-04-28", "Modification_Comment": "updated Relationships, Research_Gaps"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated References, Relationships, Time_of_Introduction"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}