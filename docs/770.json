{"cwe": {"@ID": "770", "@Name": "Allocation of Resources Without Limits or Throttling", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.", "Extended_Description": {"xhtml:p": "Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily.  Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service."}, "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "400", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "665", "@View_ID": "1000"}, {"@Nature": "ChildOf", "@CWE_ID": "400", "@View_ID": "1003", "@Ordinal": "Primary"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Often"}}, "Modes_Of_Introduction": {"Introduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}, {"Phase": "Operation"}, {"Phase": "System Configuration"}]}, "Likelihood_Of_Exploit": "High", "Common_Consequences": {"Consequence": {"Scope": "Availability", "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Note": "When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource."}}, "Detection_Methods": {"Detection_Method": [{"@Detection_Method_ID": "DM-8", "Method": "Manual Static Analysis", "Description": "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all."}, {"Method": "Fuzzing", "Description": {"xhtml:p": ["While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause.", "When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness."]}, "Effectiveness": "Opportunistic"}, {"Method": "Automated Dynamic Analysis", "Description": "Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results."}, {"Method": "Automated Static Analysis", "Description": {"xhtml:p": ["Specialized configuration or tuning may be required to train automated tools to recognize this weakness.", "Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.", "Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day."]}}]}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Requirements", "Description": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits."}, {"Phase": "Architecture and Design", "Description": "Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410."}, {"Phase": "Architecture and Design", "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold."}, {"@Mitigation_ID": "MIT-5", "Phase": "Implementation", "Strategy": "Input Validation", "Description": {"xhtml:p": ["Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.", "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"", "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."]}, "Effectiveness_Notes": "This will only be applicable to cases where user input can influence the size or frequency of resource allocations."}, {"@Mitigation_ID": "MIT-15", "Phase": "Architecture and Design", "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"Phase": "Architecture and Design", "Description": {"xhtml:p": ["Mitigation of resource exhaustion attacks requires that the target system either:", "The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.", "The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker."], "xhtml:ul": {"xhtml:li": ["recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays", "uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed."]}}}, {"Phase": "Architecture and Design", "Description": "Ensure that protocols have specific limits of scale placed on them."}, {"@Mitigation_ID": "MIT-38.1", "Phase": ["Architecture and Design", "Implementation"], "Description": {"xhtml:p": ["If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.", "Ensure that all failures in resource allocation place the system into a safe posture."]}}, {"@Mitigation_ID": "MIT-47", "Phase": ["Operation", "Architecture and Design"], "Strategy": "Resource Limitation", "Description": {"xhtml:p": ["Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.", "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.", "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."]}}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"@Demonstrative_Example_ID": "DX-25", "Intro_Text": "This code allocates a socket and forks each time it receives a new connection.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "newsock=accept(sock, ...);printf(\"A connection has been accepted\\n\");pid = fork();"}, "#text": "sock=socket(AF_INET, SOCK_STREAM, 0);while (1) {}"}}, "Body_Text": "The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely."}, {"@Demonstrative_Example_ID": "DX-50", "Intro_Text": "In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Unable to open socket connection\");return(FAIL);"}, {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"@style": "margin-left:1em;", "#text": "break;"}, "#text": "if (!(writeToFile(buffer) > 0))"}, "#text": "while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){}"}}, "xhtml:br": null, "#text": "if (openFileToWrite(filename) > 0) {}closeFile();"}}], "#text": "char filename[FILENAME_SIZE];char buffer[BUFFER_SIZE];int socket = openSocketConnection(host, port);\n                           if (socket < 0) {}if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) {}closeSocket(socket);"}}, "#text": "int writeDataFromSocketToFile(char *host, int port){}"}}, "Body_Text": "This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service."}, {"@Demonstrative_Example_ID": "DX-51", "Intro_Text": "In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */", "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "body = &message[1][0];processMessageBody(body);return(SUCCESS);"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Unable to process message; invalid message length\");return(FAIL);"}], "#text": "char *body;\n                           int length = getMessageLength(message[0]);\n                           if (length > 0) {}else {}"}}, "#text": "int processMessage(char **message){}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": null, "#text": "unsigned int length = getMessageLength(message[0]);if ((length > 0) && (length < MAX_LENGTH)) {...}"}}], "Body_Text": ["This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check", "Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code."]}, {"@Demonstrative_Example_ID": "DX-52", "Intro_Text": "In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.", "Example_Code": [{"@Nature": "Bad", "@Language": "Java", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null], "#text": "Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + \":\" + counter++);t.start();"}, "#text": "ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {}serverSocket.close();"}, "xhtml:br": [null, null], "#text": "try {\n                           \n                           } catch (IOException ex) {...}"}}, "#text": "public void acceptConnections() {\n                     }"}}, {"@Nature": "Good", "@Language": "Java", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null, null, null, null], "#text": "hasConnections = checkForMoreConnections();Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + \":\" + counter++);ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);pool.execute(t);"}, "#text": "ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {}serverSocket.close();"}, "xhtml:br": [null, null], "#text": "try {\n                           \n                           } catch (IOException ex) {...}"}}, "#text": "public static final int SERVER_PORT = 4444;public static final int MAX_CONNECTIONS = 10;...\n                     public void acceptConnections() {\n                     }"}}], "Body_Text": ["In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.", "The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated."]}, {"Intro_Text": "An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased.", "References": {"Reference": {"@External_Reference_ID": "REF-667"}}}, {"Intro_Text": "Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "foo = malloc(1024);return foo;"}, {"@style": "margin-left:1em;", "#text": "free(foo);"}, {"@style": "margin-left:1em;", "xhtml:div": {"@style": "margin-left:1em;", "#text": "foo=connection();"}, "xhtml:br": [null, null], "#text": "while(1) {}endConnection(foo)"}], "xhtml:br": [null, null, null, null], "#text": "bar connection() {}endConnection(bar foo) {}int main() {}"}}}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}, {"Reference": "CVE-2009-4017", "Description": "Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4017"}, {"Reference": "CVE-2009-2726", "Description": "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2726"}, {"Reference": "CVE-2009-2540", "Description": "Large integer value for a length property in an object causes a large amount of memory allocation.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2540"}, {"Reference": "CVE-2009-2054", "Description": "Product allows exhaustion of file descriptors when processing a large number of TCP packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2054"}, {"Reference": "CVE-2008-5180", "Description": "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5180"}, {"Reference": "CVE-2008-1700", "Description": "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1700"}, {"Reference": "CVE-2005-4650", "Description": "CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4650"}, {"Reference": "CVE-2020-15100", "Description": "web application scanner attempts to read an excessively large file created by a user, causing process termination", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-15100"}, {"Reference": "CVE-2020-7218", "Description": "Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-7218"}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "The CERT Oracle Secure Coding Standard for Java (2011)", "Entry_ID": "FIO04-J", "Entry_Name": "Close resources when they are no longer needed"}, {"@Taxonomy_Name": "The CERT Oracle Secure Coding Standard for Java (2011)", "Entry_ID": "SER12-J", "Entry_Name": "Avoid memory and resource leaks during serialization"}, {"@Taxonomy_Name": "The CERT Oracle Secure Coding Standard for Java (2011)", "Entry_ID": "MSC05-J", "Entry_Name": "Do not exhaust heap space"}]}, "Related_Attack_Patterns": {"Related_Attack_Pattern": [{"@CAPEC_ID": "125"}, {"@CAPEC_ID": "130"}, {"@CAPEC_ID": "147"}, {"@CAPEC_ID": "197"}, {"@CAPEC_ID": "229"}, {"@CAPEC_ID": "230"}, {"@CAPEC_ID": "231"}, {"@CAPEC_ID": "469"}, {"@CAPEC_ID": "482"}, {"@CAPEC_ID": "486"}, {"@CAPEC_ID": "487"}, {"@CAPEC_ID": "488"}, {"@CAPEC_ID": "489"}, {"@CAPEC_ID": "490"}, {"@CAPEC_ID": "491"}, {"@CAPEC_ID": "493"}, {"@CAPEC_ID": "494"}, {"@CAPEC_ID": "495"}, {"@CAPEC_ID": "496"}, {"@CAPEC_ID": "528"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-386"}, {"@External_Reference_ID": "REF-387"}, {"@External_Reference_ID": "REF-388"}, {"@External_Reference_ID": "REF-7", "@Section": "Chapter 17, \"Protecting Against Denial of Service Attacks\" Page 517"}, {"@External_Reference_ID": "REF-667"}, {"@External_Reference_ID": "REF-672"}, {"@External_Reference_ID": "REF-62", "@Section": "Chapter 10, \"Resource Limits\", Page 574"}]}, "Notes": {"Note": [{"@Type": "Relationship", "#text": "This entry is different from uncontrolled resource consumption (CWE-400) in that there are other weaknesses that are related to inability to control resource consumption, such as holding on to a resource too long after use, or not correctly keeping track of active resources so that they can be managed and released when they are finished (CWE-771)."}, {"@Type": "Theoretical", "#text": "Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place."}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2009-05-13"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-07-27", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-10-29", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-12-28", "Modification_Comment": "updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Observed_Examples, References, Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-02-16", "Modification_Comment": "updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-04-05", "Modification_Comment": "updated Common_Consequences, Demonstrative_Examples, Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-06-21", "Modification_Comment": "updated Common_Consequences, Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-09-27", "Modification_Comment": "updated Demonstrative_Examples, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-03-29", "Modification_Comment": "updated Demonstrative_Examples, Detection_Factors, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-27", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-09-13", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-10-30", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-02-18", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-06-23", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2015-12-07", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-05-03", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2018-03-27", "Modification_Comment": "updated References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated Demonstrative_Examples, Description, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Related_Attack_Patterns, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Potential_Mitigations, Related_Attack_Patterns, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-06-25", "Modification_Comment": "updated Applicable_Platforms, Description, Maintenance_Notes, Potential_Mitigations, Relationship_Notes, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-12-10", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Observed_Examples, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description, Detection_Factors"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated References, Relationships"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}