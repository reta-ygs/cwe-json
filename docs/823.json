{"cwe": {"@ID": "823", "@Name": "Use of Out-of-range Pointer Offset", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.", "Extended_Description": {"xhtml:p": ["While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.", "Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.", "If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution."]}, "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1305", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1340", "@Ordinal": "Primary"}, {"@Nature": "CanPrecede", "@CWE_ID": "125", "@View_ID": "1000"}, {"@Nature": "CanPrecede", "@CWE_ID": "787", "@View_ID": "1000"}]}, "Alternate_Terms": {"Alternate_Term": {"Term": "Untrusted pointer offset", "Description": "This term is narrower than the concept of \"out-of-range\" offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values."}}, "Common_Consequences": {"Consequence": [{"Scope": "Confidentiality", "Impact": "Read Memory", "Note": "If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory."}, {"Scope": "Availability", "Impact": "DoS: Crash, Exit, or Restart", "Note": "If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Memory"], "Note": "If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible."}]}, "Detection_Methods": {"Detection_Method": {"@Detection_Method_ID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2010-2160", "Description": "Invalid offset in undocumented opcode leads to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2160"}, {"Reference": "CVE-2010-1281", "Description": "Multimedia player uses untrusted value from a file when using file-pointer calculations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1281"}, {"Reference": "CVE-2009-3129", "Description": "Spreadsheet program processes a record with an invalid size field, which is later used as an offset.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3129"}, {"Reference": "CVE-2009-2694", "Description": "Instant messaging library does not validate an offset value specified in a packet.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2694"}, {"Reference": "CVE-2009-2687", "Description": "Language interpreter does not properly handle invalid offsets in JPEG image, leading to out-of-bounds memory access and crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2687"}, {"Reference": "CVE-2009-0690", "Description": "negative offset leads to out-of-bounds read", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0690"}, {"Reference": "CVE-2008-4114", "Description": "untrusted offset in kernel", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4114"}, {"Reference": "CVE-2010-2873", "Description": "\"blind trust\" of an offset value while writing heap memory allows corruption of function pointer,leading to code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2873"}, {"Reference": "CVE-2010-2866", "Description": "negative value (signed) causes pointer miscalculation", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2866"}, {"Reference": "CVE-2010-2872", "Description": "signed values cause incorrect pointer calculation", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2872"}, {"Reference": "CVE-2007-5657", "Description": "values used as pointer offsets", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5657"}, {"Reference": "CVE-2010-2867", "Description": "a return value from a function is sign-extended if the value is signed, then used as an offset for pointer arithmetic", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2867"}, {"Reference": "CVE-2009-1097", "Description": "portions of a GIF image used as offsets, causing corruption of an object pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1097"}, {"Reference": "CVE-2008-1807", "Description": "invalid numeric field leads to a free of arbitrary memory locations, then code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1807"}, {"Reference": "CVE-2007-2500", "Description": "large number of elements leads to a free of an arbitrary address", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2500"}, {"Reference": "CVE-2008-1686", "Description": "array index issue (CWE-129) with negative offset, used to dereference a function pointer", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1686"}, {"Reference": "CVE-2010-2878", "Description": "\"buffer seek\" value - basically an offset?", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2878"}]}, "Related_Attack_Patterns": {"Related_Attack_Pattern": {"@CAPEC_ID": "129"}}, "References": {"Reference": {"@External_Reference_ID": "REF-62", "@Section": "Chapter 6, \"Pointer Arithmetic\", Page 277"}}, "Notes": {"Note": [{"@Type": "Maintenance", "#text": "There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains."}, {"@Type": "Terminology", "#text": "Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants."}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2010-09-22"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-12-10", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-04-28", "Modification_Comment": "updated Research_Gaps"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Detection_Factors, Relationships"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}