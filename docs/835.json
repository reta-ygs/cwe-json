{"cwe": {"@ID": "835", "@Name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.", "Extended_Description": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.", "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "834", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "834", "@View_ID": "1003", "@Ordinal": "Primary"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}}, "Common_Consequences": {"Consequence": {"Scope": "Availability", "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Amplification"], "Note": "An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond."}}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:i": ["// create socket to connect to server", "// keep trying to establish connection to the server", "// close socket and return success or failure"], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null], "xhtml:i": ["// establish connection to server", "// if connected then read and process messages from server"], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null], "xhtml:i": "// read and process messages", "#text": "..."}}, "#text": "connected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));\n                                 \n                                 \n                                 if (connected > -1) {}"}}, "#text": "...int servsock;int connected;struct sockaddr_in servaddr;\n                           \n                           \n                           servsock = socket( AF_INET, SOCK_STREAM, 0);memset( &servaddr, 0, sizeof(servaddr));servaddr.sin_family = AF_INET;servaddr.sin_port = htons(port);servaddr.sin_addr.s_addr = inet_addr(hostaddr);\n                           do {\n                           \n                           \n                           } while (connected < 0);\n                           \n                           \n                           ..."}}, "#text": "int processMessagesFromServer(char *hostaddr, int port) {}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null], "xhtml:i": ["// initialize number of attempts counter", "// keep trying to establish connection to the server", "// up to a maximum number of attempts", "// close socket and return success or failure"], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null], "xhtml:i": ["// establish connection to server", "// increment counter", "// if connected then read and process messages from server"], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null], "xhtml:i": "// read and process messages", "#text": "..."}}, "#text": "connected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));\n                                 \n                                 \n                                 count++;\n                                 \n                                 \n                                 if (connected > -1) {}"}}, "#text": "...\n                           \n                           int count = 0;do {\n                           \n                           \n                           \n                           \n                           \n                           } while (connected < 0 && count < MAX_ATTEMPTS);\n                           \n                           \n                           ..."}}, "#text": "int processMessagesFromServer(char *hostaddr, int port) {}"}}], "Body_Text": "However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code."}, {"Intro_Text": "For this example the method isReorderNeeded as part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.", "Example_Code": [{"@Nature": "Bad", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:i": ["// get inventory count for book", "// find number of days until inventory count reaches minimum", "// if number of days within reorder timeframe", "// set reorder return boolean to true"], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null], "#text": "inventoryCount = inventoryCount - rateSold;days++;"}}, {"@style": "margin-left:1em;", "#text": "isReorder = true;"}], "#text": "boolean isReorder = false;\n                           int minimumCount = 10;int days = 0;\n                           \n                           \n                           int inventoryCount = inventory.getIventoryCount(bookISBN);\n                           \n                           \n                           while (inventoryCount > minimumCount) {}\n                           \n                           \n                           \n                           \n                           \n                           if (days > 0 && days < 5) {}\n                           return isReorder;"}}, "#text": "public boolean isReorderNeeded(String bookISBN, int rateSold) {}"}}, {"@Nature": "Good", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:i": "// validate rateSold variable", "xhtml:div": {"@style": "margin-left:1em;", "#text": "return isReorder;"}, "#text": "...\n                           \n                           \n                           if (rateSold < 1) {}\n                           ..."}}, "#text": "public boolean isReorderNeeded(String bookISBN, int rateSold) {}"}}], "Body_Text": "However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop,as in the following code."}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2022-25304", "Description": "A Python machine communication platform did not account for receiving a malformed packet with a null size, causing the receiving function to never update the message buffer and be caught in an infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-25304"}, {"Reference": "CVE-2011-1027", "Description": "Chain: off-by-one error leads to infinite loop using invalid hex-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1027"}, {"Reference": "CVE-2011-1142", "Description": "Chain: self-referential values in recursive definitions lead to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1142"}, {"Reference": "CVE-2011-1002", "Description": "NULL UDP packet is never cleared from a queue, leading to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1002"}, {"Reference": "CVE-2006-6499", "Description": "Chain: web browser crashes due to infinite loop - \"bad\n\t      looping logic [that relies on] floating point math [CWE-1339] to exit\n\t      the loop [CWE-835]\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"}, {"Reference": "CVE-2010-4476", "Description": "Floating point conversion routine cycles back and forth between two different values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4476"}, {"Reference": "CVE-2010-4645", "Description": "Floating point conversion routine cycles back and forth between two different values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4645"}, {"Reference": "CVE-2010-2534", "Description": "Chain: improperly clearing a pointer in a linked list leads to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2534"}, {"Reference": "CVE-2013-1591", "Description": "Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-1591"}, {"Reference": "CVE-2008-3688", "Description": "Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": {"@Taxonomy_Name": "OMG ASCSM", "Entry_ID": "ASCSM-CWE-835"}}, "References": {"Reference": [{"@External_Reference_ID": "REF-62", "@Section": "Chapter 7, \"Looping Constructs\", Page 327"}, {"@External_Reference_ID": "REF-962", "@Section": "ASCSM-CWE-835"}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2011-03-22"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated References, Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-12-10", "Modification_Comment": "updated Observed_Examples, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description, Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Relationships"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}