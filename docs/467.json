{"cwe": {"@ID": "467", "@Name": "Use of sizeof() on a Pointer Type", "@Abstraction": "Variant", "@Structure": "Simple", "@Status": "Draft", "Description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.", "Extended_Description": "The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.", "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "131", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Weakness_Ordinalities": {"Weakness_Ordinality": {"Ordinality": "Primary"}}, "Applicable_Platforms": {"Language": [{"@Name": "C", "@Prevalence": "Undetermined"}, {"@Name": "C++", "@Prevalence": "Undetermined"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Likelihood_Of_Exploit": "High", "Common_Consequences": {"Consequence": {"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Memory", "Read Memory"], "Note": "This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows."}}, "Detection_Methods": {"Detection_Method": {"@Detection_Method_ID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}}, "Potential_Mitigations": {"Mitigation": {"Phase": "Implementation", "Description": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."}}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "Care should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure.", "Body_Text": ["In this example, sizeof(foo) returns the size of the pointer.", "In this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer."], "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null], "#text": "double *foo;...foo = (double *)malloc(sizeof(foo));"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null], "#text": "double *foo;...foo = (double *)malloc(sizeof(*foo));"}}]}, {"Intro_Text": "This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.", "Example_Code": [{"@Nature": "Bad", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null], "xhtml:i": "/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */", "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Auth failure of username using sizeof\\n\");return(AUTH_FAIL);"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Auth success of password using sizeof\\n\");return(AUTH_SUCCESS);"}, {"@style": "margin-left:1em;", "xhtml:br": null, "#text": "printf(\"Auth fail of password using sizeof\\n\");return(AUTH_FAIL);"}], "xhtml:i": "/* Because of CWE-467, the sizeof returns 4 on many platforms and architectures. */", "#text": "printf(\"Sizeof username = %d\\n\", sizeof(username));printf(\"Sizeof pass = %d\\n\", sizeof(pass));\n                           if (strncmp(username, inUser, sizeof(username))) {}\n                           \n                           \n                           if (! strncmp(pass, inPass, sizeof(pass))) {}else {}"}}, {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "#text": "ExitError(\"Usage: Provide a username and password\");"}, {"@style": "margin-left:1em;", "#text": "ExitError(\"Authentication failed\");"}, {"@style": "margin-left:1em;", "#text": "DoAuthenticatedTask(argv[1]);"}], "#text": "int authResult;\n                           if (argc < 3) {}authResult = AuthenticateUser(argv[1], argv[2]);if (authResult != AUTH_SUCCESS) {}else {}"}}], "#text": "char *username = \"admin\";char *pass = \"password\";\n                     int AuthenticateUser(char *inUser, char *inPass) {}\n                     int main (int argc, char **argv){}"}}, {"@Nature": "Attack", "xhtml:div": {"xhtml:br": [null, null], "#text": "pass5passABCDEFGHpassWORD"}}], "Body_Text": ["In AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison (CWE-187), leading to improper authentication (CWE-287).", "Because of the partial comparison, any of these passwords would still cause authentication to succeed for the \"admin\" user:", "Because only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible.", "The same problem also applies to the username, so values such as \"adminXYZ\" and \"administrator\" will succeed for the username."]}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "CLASP", "Entry_Name": "Use of sizeof() on a pointer type"}, {"@Taxonomy_Name": "CERT C Secure Coding", "Entry_ID": "ARR01-C", "Entry_Name": "Do not apply the sizeof operator to a pointer when taking the size of an array"}, {"@Taxonomy_Name": "CERT C Secure Coding", "Entry_ID": "MEM35-C", "Entry_Name": "Allocate sufficient memory for an object", "Mapping_Fit": "CWE More Abstract"}, {"@Taxonomy_Name": "Software Fault Patterns", "Entry_ID": "SFP10", "Entry_Name": "Incorrect Buffer Length Computation"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-18"}, {"@External_Reference_ID": "REF-442"}]}, "Content_History": {"Submission": {"Submission_Name": "CLASP", "Submission_Date": "2006-07-19"}, "Modification": [{"Modification_Name": "Eric Dalci", "Modification_Organization": "Cigital", "Modification_Date": "2008-07-01", "Modification_Comment": "updated Time_of_Introduction"}, {"Modification_Organization": "KDM Analytics", "Modification_Date": "2008-08-01", "Modification_Comment": "added/updated white box definitions"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-09-08", "Modification_Comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-11-24", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-03-10", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-12-28", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-02-16", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-27", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-09-13", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-06-23", "Modification_Comment": "updated Description, Other_Notes"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Detection_Factors, Relationships"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}