{"cwe": {"@ID": "23", "@Name": "Relative Path Traversal", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Draft", "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.", "Extended_Description": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.", "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "22", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "22", "@View_ID": "1305", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "22", "@View_ID": "1340", "@Ordinal": "Primary"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}}, "Alternate_Terms": {"Alternate_Term": {"Term": "Zip Slip", "Description": "\"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59)."}}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Common_Consequences": {"Consequence": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": "Execute Unauthorized Code or Commands", "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."}, {"Scope": "Integrity", "Impact": "Modify Files or Directories", "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."}, {"Scope": "Confidentiality", "Impact": "Read Files or Directories", "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."}, {"Scope": "Availability", "Impact": "DoS: Crash, Exit, or Restart", "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product."}]}, "Detection_Methods": {"Detection_Method": {"@Detection_Method_ID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}}, "Potential_Mitigations": {"Mitigation": [{"@Mitigation_ID": "MIT-5.1", "Phase": "Implementation", "Strategy": "Input Validation", "Description": {"xhtml:p": ["Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.", "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"", "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.", "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.", "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."]}}, {"@Mitigation_ID": "MIT-20.1", "Phase": "Implementation", "Strategy": "Input Validation", "Description": {"xhtml:p": ["Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.", "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:"], "xhtml:ul": {"xhtml:li": ["realpath() in C", "getCanonicalPath() in Java", "GetFullPath() in ASP.NET", "realpath() or abs_path() in Perl", "realpath() in PHP"]}}}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "The following URLs are vulnerable to this attack:", "Example_Code": [{"@Nature": "Bad", "xhtml:div": {"xhtml:br": [null, null], "#text": "http://example.com.br/get-files.jsp?file=report.pdfhttp://example.com.br/get-page.php?home=aaa.htmlhttp://example.com.br/some-page.asp?page=index.html"}}, {"@Nature": "Attack", "xhtml:div": {"xhtml:br": [null, null], "#text": "http://example.com.br/get-files?file=../../../../somedir/somefilehttp://example.com.br/../../../../etc/shadowhttp://example.com.br/get-files?file=../../../../etc/passwd"}}], "Body_Text": "A simple way to execute this attack is like this:"}, {"@Demonstrative_Example_ID": "DX-27", "Intro_Text": "The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.", "Example_Code": [{"@Nature": "Bad", "@Language": "Perl", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "#text": "print \"<li>$_</li>\\n\";"}, "#text": "my $dataPath = \"/users/cwe/profiles\";my $username = param(\"user\");my $profilePath = $dataPath . \"/\" . $username;\n                     open(my $fh, \"<\", $profilePath) || ExitError(\"profile read error: $profilePath\");print \"<ul>\\n\";while (<$fh>) {}print \"</ul>\\n\";"}}, {"@Nature": "Attack", "xhtml:div": "../../../etc/passwd"}, {"@Nature": "Result", "xhtml:div": "/users/cwe/profiles/../../../etc/passwd"}, {"@Nature": "Result", "xhtml:div": "/etc/passwd"}], "Body_Text": ["While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:", "The program would generate a profile pathname like this:", "When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:", "As a result, the attacker could read the entire text of the password file.", "Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined."]}, {"@Demonstrative_Example_ID": "DX-22", "Intro_Text": "The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.", "Example_Code": [{"@Nature": "Good", "@Language": "HTML", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null], "#text": "<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">\n                     Choose a file to upload:<input type=\"file\" name=\"filename\"/><br/><input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n                     </form>"}}, {"@Nature": "Bad", "@Language": "Java", "xhtml:div": {"xhtml:br": null, "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "bw.write(line);bw.newLine();bw.flush();"}, "#text": "if (line.indexOf(boundary) == -1) {}"}, "#text": "BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));for (String line; (line=br.readLine())!=null; ) {} //end of for loopbw.close();"}}, "#text": "// extract the filename from the Http headerBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));...pLine = br.readLine();String filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));...\n                                       // output the file to the local upload directorytry {\n                                       \n                                       } catch (IOException ex) {...}// output successful upload response HTML page"}}, "#text": "response.setContentType(\"text/html\");PrintWriter out = response.getWriter();String contentType = request.getContentType();\n                                 // the starting position of the boundary headerint ind = contentType.indexOf(\"boundary=\");String boundary = contentType.substring(ind+9);\n                                 String pLine = new String();String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n                                 // verify that content type is multipart form dataif (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {\n                                 }// output unsuccessful upload response HTML pageelse{...}"}}, {"@style": "margin-left:1em;", "#text": "..."}], "#text": "...\n                           protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n                           }"}}, "#text": "public class FileUploadServlet extends HttpServlet {\n                     }"}}], "Body_Text": ["When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.", "This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.", "Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."]}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2019-20916", "Description": "Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-20916"}, {"Reference": "CVE-2022-24877", "Description": "directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24877"}, {"Reference": "CVE-2020-4053", "Description": "a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4053"}, {"Reference": "CVE-2021-21972", "Description": "Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21972"}, {"Reference": "CVE-2019-10743", "Description": "Go-based archive library allows extraction of  files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10743"}, {"Reference": "CVE-2002-0298", "Description": "Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several \"/../\" sequences, or several \"../\" in a URI.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0298"}, {"Reference": "CVE-2002-0661", "Description": "\"\\\" not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0661"}, {"Reference": "CVE-2002-0946", "Description": "Arbitrary files may be read files via ..\\ (dot dot) sequences in an HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0946"}, {"Reference": "CVE-2002-1042", "Description": "Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via \"..\\\" sequences in queries.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1042"}, {"Reference": "CVE-2002-1209", "Description": "Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via \"..\\\" sequences in a GET request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1209"}, {"Reference": "CVE-2002-1178", "Description": "Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via \"..\\\" sequences in an HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1178"}, {"Reference": "CVE-2002-1987", "Description": "Protection mechanism checks for \"/..\" but doesn't account for Windows-specific \"\\..\" allowing read of arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1987"}, {"Reference": "CVE-2005-2142", "Description": "Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a \"\\..\" sequence in an LS command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2142"}, {"Reference": "CVE-2002-0160", "Description": "The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a \"..\\..\" sequence in the URL to port 2002.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0160"}, {"Reference": "CVE-2001-0467", "Description": "\"\\...\" in web server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0467"}, {"Reference": "CVE-2001-0963", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0963"}, {"Reference": "CVE-2001-1193", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1193"}, {"Reference": "CVE-2001-1131", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1131"}, {"Reference": "CVE-2001-0480", "Description": "read of arbitrary files and directories using GET or CD with \"...\" in Windows-based FTP server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0480"}, {"Reference": "CVE-2002-0288", "Description": "read files using \".\" and Unicode-encoded \"/\" or \"\\\" characters in the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0288"}, {"Reference": "CVE-2003-0313", "Description": "Directory listing of web server using \"...\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0313"}, {"Reference": "CVE-2005-1658", "Description": "Triple dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1658"}, {"Reference": "CVE-2000-0240", "Description": "read files via \"/........../\" in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0240"}, {"Reference": "CVE-2000-0773", "Description": "read files via \"....\" in web server", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0773"}, {"Reference": "CVE-1999-1082", "Description": "read files via \"......\" in web server (doubled triple dot?)", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1082"}, {"Reference": "CVE-2004-2121", "Description": "read files via \"......\" in web server (doubled triple dot?)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2121"}, {"Reference": "CVE-2001-0491", "Description": "multiple attacks using \"..\", \"...\", and \"....\" in different commands", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0491"}, {"Reference": "CVE-2001-0615", "Description": "\"...\" or \"....\" in chat server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0615"}, {"Reference": "CVE-2005-2169", "Description": "chain: \".../...//\" bypasses protection mechanism using regexp's that remove \"../\" resulting in collapse into an unsafe value \"../\" (CWE-182) and resultant path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2169"}, {"Reference": "CVE-2005-0202", "Description": "\".../....///\" bypasses regexp's that remove \"./\" and \"../\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0202"}, {"Reference": "CVE-2004-1670", "Description": "Mail server allows remote attackers to create arbitrary directories via a \"..\" or rename arbitrary files via a \"....//\" in user supplied parameters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1670"}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "PLOVER", "Entry_Name": "Relative Path Traversal"}, {"@Taxonomy_Name": "Software Fault Patterns", "Entry_ID": "SFP16", "Entry_Name": "Path Traversal"}]}, "Related_Attack_Patterns": {"Related_Attack_Pattern": [{"@CAPEC_ID": "139"}, {"@CAPEC_ID": "76"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-192"}, {"@External_Reference_ID": "REF-62", "@Section": "Chapter 9, \"Filenames and Paths\", Page 503"}, {"@External_Reference_ID": "REF-1282"}]}, "Content_History": {"Submission": {"Submission_Name": "PLOVER", "Submission_Date": "2006-07-19"}, "Modification": [{"Modification_Name": "Eric Dalci", "Modification_Organization": "Cigital", "Modification_Date": "2008-07-01", "Modification_Comment": "updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-09-08", "Modification_Comment": "updated Relationships, References, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-10-14", "Modification_Comment": "updated Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-07-27", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-02-16", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-06-21", "Modification_Comment": "updated Description, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-03-29", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-01-19", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Applicable_Platforms"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Potential_Mitigations, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-06-25", "Modification_Comment": "updated Observed_Examples, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-12-10", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-10-28", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-06-28", "Modification_Comment": "updated Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Alternate_Terms, Observed_Examples, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Common_Consequences, Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Detection_Factors, Relationships"}], "Contribution": {"@Type": "Feedback", "Contribution_Name": "Nick Johnston", "Contribution_Date": "2022-07-11", "Contribution_Comment": "Identified weakness in Perl demonstrative example"}}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}