{"cwe": {"@ID": "444", "@Name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.", "Extended_Description": {"xhtml:p": ["HTTP requests or responses (\"messages\") can be\n\t   malformed or unexpected in ways that cause web servers or\n\t   clients to interpret the messages in different ways than\n\t   intermediary HTTP agents such as load balancers, reverse\n\t   proxies, web caching proxies, application firewalls,\n\t   etc. For example, an adversary may be able to add duplicate\n\t   or different header fields that a client or server might\n\t   interpret as one set of messages, whereas the intermediary\n\t   might interpret the same sequence of bytes as a different\n\t   set of messages. For example, discrepancies can arise in\n\t   how to handle duplicate headers like two Transfer-encoding\n\t   (TE) or two Content-length (CL), or the malicious HTTP\n\t   message will have different headers for TE and\n\t   CL.", "The inconsistent parsing and interpretation of messages\n\t   can allow the adversary to \"smuggle\" a message to the\n\t   client/server without the intermediary being aware of it.", "This weakness is usually the result of the usage\n\t   of outdated or incompatible HTTP protocol versions in the\n\t   HTTP agents."]}, "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "436", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "436", "@View_ID": "1003", "@Ordinal": "Primary"}]}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}, "Technology": {"@Class": "Web Based", "@Prevalence": "Undetermined"}}, "Alternate_Terms": {"Alternate_Term": [{"Term": "HTTP Request Smuggling"}, {"Term": "HTTP Response Smuggling"}, {"Term": "HTTP Smuggling"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Common_Consequences": {"Consequence": {"Scope": ["Integrity", "Non-Repudiation", "Access Control"], "Impact": ["Unexpected State", "Hide Activities", "Bypass Protection Mechanism"], "Note": "An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack)."}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Implementation", "Description": "Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433]."}, {"Phase": "Implementation", "Description": "Use only SSL communication."}, {"Phase": "Implementation", "Description": "Terminate the client session after each request."}, {"Phase": "System Configuration", "Description": "Turn all pages to non-cacheable."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage.", "Example_Code": [{"@Nature": "Attack", "xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null], "#text": "POST http://www.website.com/foobar.html HTTP/1.1\n\t\t Host: www.website.com\n\t\t Connection: Keep-Alive\n\t\t Content-Type: application/x-www-form-urlencoded\n\t\t Content-Length: 0\n\t\t Content-Length: 54\n\t\t \n                 GET /poison.html HTTP/1.1\n\t\t Host: www.website.com\n\t\t Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1\n\t\t Host: www.website.com\n\t\t Connection: Keep-Alive"}, {"@Nature": "Result", "xhtml:br": [null, null, null], "#text": "GET /poison.html HTTP/1.1\n\t\tHost: www.website.com\n\t\tBla:"}, {"@Nature": "Attack", "xhtml:br": [null, null, null], "#text": "GET http://www.website.com/page_to_poison.html HTTP/1.1\n\t\tHost: www.website.com\n\t\tConnection: Keep-Alive"}, {"@Nature": "Attack", "xhtml:br": [null, null, null, null, null, null], "xhtml:i": "Content-Length: 54 (ignored by server)", "#text": "POST http://www.website.com/foobar.html HTTP/1.1\n\t\tHost: www.website.com\n\t\tConnection: Keep-Alive\n\t\tContent-Type: application/x-www-form-urlencoded\n\t\tContent-Length: 0"}, {"@Nature": "Attack", "xhtml:br": [null, null, null, null, null], "#text": "GET /poison.html HTTP/1.1\n\t\tHost: www.website.com\n\t\tBla: GET http://www.website.com/page_to_poison.html HTTP/1.1\n\t\tHost: www.website.com\n\t\tConnection: Keep-Alive"}, {"@Nature": "Good", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "// Set up response writer object", "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:i": "// check for multiple content length headers", "xhtml:br": [null, null, null, null, null, null], "xhtml:div": [{"@style": "margin-left:1em;", "#text": "count++;"}, {"@style": "margin-left:1em;", "xhtml:i": "// output error response"}, {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:i": "// process request"}}], "#text": "Enumeration contentLengthHeaders = request.getHeaders(\"Content-Length\");\n\t\t\t\t\t\t  int count = 0;\n\t\t\t\t\t\t  while (contentLengthHeaders.hasMoreElements()) {\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  if (count > 1) {\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t}"}}, "#text": "...try {\n\t\t\t\t\t  } catch (Exception ex) {...}"}}, "#text": "protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t  }"}}], "Body_Text": ["When this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two \"Content-Length\" headers. The proxy server ignores the first header, so it assumes the request has a body of length 54 bytes. Therefore, it treats the data in the next three lines that contain exactly 54 bytes as the first request's body:", "The proxy then parses the remaining bytes, which it treats as the client's second request:", "The original request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first \"Content-Length\" header and considers that the first POST request has no body.", "Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:", "Note that the \"Bla:\" header is treated as a regular header, so it is not parsed as a separate GET request.", "The requests the web server sees are \"POST /foobar.html\" and \"GET /poison.html\", so it sends back two responses with the contents of the \"foobar.html\" page and the \"poison.html\" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client - \"POST /foobar.html\" and \"GET /page_to_poison.html\". If the response is cacheable, the proxy caches the contents of \"poison.html\" under the URL \"page_to_poison.html\", and the cache is poisoned! Any client requesting \"page_to_poison.html\" from the proxy would receive the \"poison.html\" page.", "When a website includes both a proxy server and a web server, some protection against this type of attack can be achieved by installing a web application firewall, or using a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable.", "Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple \"Content-Length\" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below."]}, {"Intro_Text": "In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system.", "Example_Code": {"@Nature": "Attack", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null, null], "#text": "POST /page.asp HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Length: 49223\n                     zzz...zzz [\"z\" x 49152]POST /page.asp HTTP/1.0Connection: Keep-AliveContent-Length: 30\n                     POST /page.asp HTTP/1.0Bla: POST /page.asp?cmd.exe HTTP/1.0Connection: Keep-Alive"}}, "Body_Text": ["When this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of \"z\" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request.", "Note that there is no CRLF after the \"Bla: \" header so the POST in the line is parsed as the value of the \"Bla:\" header. Although the line contains the pattern identified with a worm (\"cmd.exe\"), it is not blocked, since it is considered part of a header value. Therefore, \"cmd.exe\" is smuggled through the firewall.", "When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected \"Content-Type: application/x-www-form-urlencoded\" header, and starts parsing the second request.", "This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the \"Bla:\" header. And unlike the firewall, the web server processes the final POST as a separate third request and the \"cmd.exe\" worm is smuggled through the firewall to the web server.", "To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack."]}, {"Intro_Text": "The interpretation of HTTP responses can be manipulated if response headers include a space between the header name and colon, or if HTTP 1.1 headers are sent through a proxy configured for HTTP 1.0, allowing for HTTP response smuggling. This can be exploited in web browsers and other applications when used in combination with various proxy servers. For instance, the HTTP response interpreted by the front-end/client HTTP agent/entity - in this case the web browser - can interpret a single response from an adversary-compromised web server as being two responses from two different web sites. In the Example below, notice the extra space after the Content-Length and Set-Cookie headers.", "Example_Code": {"@Nature": "Attack", "xhtml:br": [null, null, null, null, null, null, null, null, null, null, null], "xhtml:b": ["Content-Length :", "Set-Cookie :"], "#text": "HTTP/1.1 200 OK\n\t\tDate: Fri, 08 Aug 2016 08:12:31 GMT\n\t\tServer: Apache (Unix)\n\t\tConnection: Keep-Alive\n\t\tContent-Encoding: gzip\n\t\tContent-Type: text/html\n\t\t 2345\n\t\tTransfer-Encoding: chunked\n\t\t token=\"Malicious Code\"\n\t\t\n\t\t<HTML> ... \"Malicious Code\""}}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2022-24766", "Description": "SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24766"}, {"Reference": "CVE-2021-37147", "Description": "Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an \"LF line ending\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-37147"}, {"Reference": "CVE-2020-8287", "Description": "Node.js platform allows request smuggling via two Transfer-Encoding headers", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8287"}, {"Reference": "CVE-2006-6276", "Description": "Web servers allow request smuggling via inconsistent HTTP headers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6276"}, {"Reference": "CVE-2005-2088", "Description": "HTTP server allows request smuggling with both a \"Transfer-Encoding: chunked\" header and a Content-Length header", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2088"}, {"Reference": "CVE-2005-2089", "Description": "HTTP server allows request smuggling with both a \"Transfer-Encoding: chunked\" header and a Content-Length header", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2089"}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "PLOVER", "Entry_Name": "HTTP Request Smuggling"}, {"@Taxonomy_Name": "WASC", "Entry_ID": "26", "Entry_Name": "HTTP Request Smuggling"}, {"@Taxonomy_Name": "WASC", "Entry_ID": "27", "Entry_Name": "HTTP Response Smuggling"}]}, "Related_Attack_Patterns": {"Related_Attack_Pattern": [{"@CAPEC_ID": "273"}, {"@CAPEC_ID": "33"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-433"}, {"@External_Reference_ID": "REF-1273"}, {"@External_Reference_ID": "REF-1274"}, {"@External_Reference_ID": "REF-1275"}, {"@External_Reference_ID": "REF-1276"}, {"@External_Reference_ID": "REF-1277"}, {"@External_Reference_ID": "REF-1278"}]}, "Notes": {"Note": {"@Type": "Theoretical", "#text": "Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers)."}}, "Content_History": {"Submission": {"Submission_Name": "PLOVER", "Submission_Date": "2006-07-19"}, "Modification": [{"Modification_Name": "Eric Dalci", "Modification_Organization": "Cigital", "Modification_Date": "2008-07-01", "Modification_Comment": "updated Potential_Mitigations, Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2008-09-08", "Modification_Comment": "updated Name, Relationships, Other_Notes, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-05-27", "Modification_Comment": "updated Name, Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-02-16", "Modification_Comment": "updated Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Common_Consequences, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-10-30", "Modification_Comment": "updated Demonstrative_Examples, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-06-23", "Modification_Comment": "updated Other_Notes, Potential_Mitigations, Theoretical_Notes"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-07-30", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2015-12-07", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Applicable_Platforms"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Applicable_Platforms, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-10-28", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-04-28", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-06-28", "Modification_Importance": "Critical", "Modification_Comment": "Extended the abstraction of this entry to include both HTTP request and response smuggling."}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-06-28", "Modification_Comment": "updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, References, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated References, Relationships, Time_of_Introduction"}], "Previous_Entry_Name": [{"@Date": "2008-04-11", "#text": "HTTP Request Smuggling"}, {"@Date": "2008-09-09", "#text": "Interpretation Conflict in Web Traffic (aka 'HTTP Request Smuggling')"}, {"@Date": "2009-05-27", "#text": "Inconsistent Interpretation of HTTP Requests (aka 'HTTP Request Smuggling')"}, {"@Date": "2022-06-28", "#text": "Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')"}]}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}