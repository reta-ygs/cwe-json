{"cwe": {"@ID": "1022", "@Name": "Use of Web Link to Untrusted Target with window.opener Access", "@Abstraction": "Variant", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.", "Extended_Description": "When a user clicks a link to an external site (\"target\"), the target=\"_blank\" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.", "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "266", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Applicable_Platforms": {"Language": {"@Name": "JavaScript", "@Prevalence": "Often"}, "Technology": {"@Class": "Web Based", "@Prevalence": "Often"}}, "Alternate_Terms": {"Alternate_Term": {"Term": "tabnabbing"}}, "Modes_Of_Introduction": {"Introduction": [{"Phase": "Architecture and Design", "Note": "This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page."}, {"Phase": "Implementation", "Note": "This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute."}]}, "Likelihood_Of_Exploit": "Medium", "Common_Consequences": {"Consequence": {"Scope": "Confidentiality", "Impact": "Alter Execution Logic", "Note": "The user may be redirected to an untrusted page that contains undesired content or malicious script code."}}, "Detection_Methods": {"Detection_Method": {"@Detection_Method_ID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Architecture and Design", "Description": "Specify in the design that any linked external document must not be granted access to the location object of the calling page."}, {"Phase": "Implementation", "Description": {"xhtml:p": ["When creating a link to an external document using the <a> tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\".", "If opening the external document in a new window via javascript, then reset the opener by setting it equal to null."]}}, {"Phase": "Implementation", "Description": {"xhtml:p": "Do not use \"_blank\" targets. However, this can affect the usability of the application."}}]}, "Demonstrative_Examples": {"Demonstrative_Example": {"Intro_Text": "In this example, the application opens a link in a named window/tab without taking precautions to prevent the called page from tampering with the calling page's location in the browser.", "Body_Text": ["There are two ways that this weakness is commonly seen. The first is when the application generates an <a> tag is with target=\"_blank\" to point to a target site:", "If the attacker offers a useful page on this link (or compromises a trusted, popular site), then a user may click on this link.  However, the attacker could use scripting code to modify the window.opener's location property to redirect the application to a malicious, attacker-controlled page - such as one that mimics the look and feel of the original application and convinces the user to re-enter authentication credentials, i.e. phishing:", "To mitigate this type of weakness, some browsers support the \"rel\" attribute with a value of \"noopener\", which sets the window.opener object equal to null. Another option is to use the \"rel\" attribute with a value of \"noreferrer\", which in essence does the same thing.", "A second way that this weakness is commonly seen is when opening a new site directly within JavaScript. In this case, a new site is opened using the window.open() function.", "To mitigate this, set the window.opener object to null."], "Example_Code": [{"@Nature": "Bad", "@Language": "HTML", "xhtml:div": "<a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\">"}, {"@Nature": "Attack", "@Language": "JavaScript", "xhtml:div": "window.opener.location = 'http://phishing.example.org/popular-bank-page';"}, {"@Nature": "Good", "@Language": "HTML", "xhtml:div": "<a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\" rel=\"noopener noreferrer\">"}, {"@Nature": "Bad", "@Language": "JavaScript", "xhtml:div": "var newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\");"}, {"@Nature": "Good", "@Language": "JavaScript", "xhtml:div": {"xhtml:br": null, "#text": "var newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\");newWindow.opener = null;"}}]}}, "References": {"Reference": [{"@External_Reference_ID": "REF-39"}, {"@External_Reference_ID": "REF-40"}, {"@External_Reference_ID": "REF-958"}]}, "Content_History": {"Submission": {"Submission_Name": "David Deatherage", "Submission_Organization": "Silicon Valley Bank", "Submission_Date": "2017-09-26"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2018-03-27", "Modification_Comment": "updated Alternate_Terms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Applicable_Platforms, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Detection_Factors, Relationships"}], "Previous_Entry_Name": {"@Date": "2018-03-27", "#text": "Improper Restriction of Cross-Origin Permission to window.opener.location"}}}, "copyright": "Copyright \u00a9 2006\u20132023, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.", "license": "CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy."}