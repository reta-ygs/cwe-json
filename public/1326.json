{"@ID": "1326", "@Name": "Missing Immutable Root of Trust in Hardware", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Draft", "Description": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.", "Extended_Description": {"xhtml:p": ["A System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts.  Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether \"Secure Boot is enabled\". These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows.", "One of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot.", "Note that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field."]}, "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "693", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}, "Operating_System": {"@Class": "Not OS-Specific", "@Prevalence": "Undetermined"}, "Architecture": {"@Class": "Not Architecture-Specific", "@Prevalence": "Undetermined"}, "Technology": [{"@Name": "Security Hardware", "@Prevalence": "Undetermined"}, {"@Class": "Not Technology-Specific", "@Prevalence": "Undetermined"}]}, "Modes_Of_Introduction": {"Introduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "Such issues could be introduced during policy definition, hardware architecture, design, manufacturing, and/or provisioning. They can be identified later during testing or system configuration phases."}]}, "Common_Consequences": {"Consequence": {"Scope": ["Authentication", "Authorization"], "Impact": ["Gain Privileges or Assume Identity", "Execute Unauthorized Code or Commands", "Modify Memory"], "Likelihood": "High"}}, "Detection_Methods": {"Detection_Method": [{"Method": "Automated Dynamic Analysis", "Description": "Automated testing can verify that RoT components are immutable.", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "Root of trust elements and memory should be part of architecture and design reviews.", "Effectiveness": "High"}]}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Architecture and Design", "Description": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes."}, {"Phase": "Implementation", "Description": "During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes."}]}, "Demonstrative_Examples": {"Demonstrative_Example": {"Intro_Text": "The RoT is stored in memory. This memory can be modified by an adversary. For example, if an SoC implements \"Secure Boot\" by storing the boot code in an off-chip/on-chip flash, the contents of the flash can be modified by using a flash programmer. Similarly, if the boot code is stored in ROM (Read-Only Memory) but the public key or the hash of the public key (used to enable \"Secure Boot\") is stored in Flash or a memory that is susceptible to modifications or writes, the implementation is vulnerable.", "Body_Text": ["In general, if the boot code, key materials and data that enable \"Secure Boot\" are all mutable, the implementation is vulnerable.", "Good architecture defines RoT as immutable in hardware. One of the best ways to achieve immutability is to store boot code, public key or hash of the public key and other relevant data in Read-Only Memory (ROM) or One-Time Programmable (OTP) memory that prevents further programming or writes."]}}, "Related_Attack_Patterns": {"Related_Attack_Pattern": [{"@CAPEC_ID": "679"}, {"@CAPEC_ID": "68"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-1152"}, {"@External_Reference_ID": "REF-1153"}]}, "Content_History": {"Submission": {"Submission_Name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna", "Submission_Organization": "Intel Corporation", "Submission_Date": "2020-04-25"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-10-28", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-04-28", "Modification_Comment": "updated Applicable_Platforms, Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-06-28", "Modification_Comment": "updated Applicable_Platforms, Modes_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Relationships"}]}}