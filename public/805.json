{"@ID": "805", "@Name": "Buffer Access with Incorrect Length Value", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.", "Extended_Description": "When the length value exceeds the size of the destination, a buffer overflow could occur.", "Related_Weaknesses": {"Related_Weakness": [{"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1000", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1305", "@Ordinal": "Primary"}, {"@Nature": "ChildOf", "@CWE_ID": "119", "@View_ID": "1340", "@Ordinal": "Primary"}]}, "Weakness_Ordinalities": {"Weakness_Ordinality": [{"Ordinality": "Resultant"}, {"Ordinality": "Primary"}]}, "Applicable_Platforms": {"Language": [{"@Name": "C", "@Prevalence": "Often"}, {"@Name": "C++", "@Prevalence": "Often"}, {"@Class": "Assembly", "@Prevalence": "Undetermined"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Likelihood_Of_Exploit": "High", "Common_Consequences": {"Consequence": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Read Memory", "Modify Memory", "Execute Unauthorized Code or Commands"], "Note": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service."}, {"Scope": "Availability", "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)"], "Note": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop."}]}, "Detection_Methods": {"Detection_Method": [{"@Detection_Method_ID": "DM-1", "Method": "Automated Static Analysis", "Description": {"xhtml:p": ["This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.", "Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges."]}, "Effectiveness": "High", "Effectiveness_Notes": "Detection techniques for buffer-related errors are more mature than for most other weakness types."}, {"@Detection_Method_ID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.", "Effectiveness": "Moderate", "Effectiveness_Notes": "Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring manual methods to diagnose the underlying problem."}, {"@Detection_Method_ID": "DM-9", "Method": "Manual Analysis", "Description": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large."}]}, "Potential_Mitigations": {"Mitigation": [{"@Mitigation_ID": "MIT-3", "Phase": "Requirements", "Strategy": "Language Selection", "Description": {"xhtml:p": ["Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.", "For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.", "Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe."]}}, {"@Mitigation_ID": "MIT-4.1", "Phase": "Architecture and Design", "Strategy": "Libraries or Frameworks", "Description": {"xhtml:p": ["Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.", "Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions."]}, "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings."}, {"@Mitigation_ID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.", "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": {"xhtml:p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."}}, {"@Mitigation_ID": "MIT-9", "Phase": "Implementation", "Description": {"xhtml:p": "Consider adhering to the following rules when allocating and managing an application's memory:", "xhtml:ul": {"xhtml:li": ["Double check that the buffer is as large as specified.", "When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.", "Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.", "If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."]}}}, {"@Mitigation_ID": "MIT-15", "Phase": "Architecture and Design", "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"@Mitigation_ID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.", "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.", "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}, {"@Mitigation_ID": "MIT-12", "Phase": "Operation", "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.", "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."}, {"@Mitigation_ID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"@Mitigation_ID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": {"xhtml:p": ["Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.", "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.", "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.", "Be careful to avoid CWE-243 and other weaknesses related to jails."]}, "Effectiveness": "Limited", "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"@Demonstrative_Example_ID": "DX-1", "Intro_Text": "This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null], "xhtml:i": "/*routine that ensures user_supplied_addr is in the right format for conversion */", "#text": "struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);\n                           \n                           \n                           \n                           validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);"}}, "#text": "void host_lookup(char *user_supplied_addr){}"}}, "Body_Text": ["This function allocates a buffer of 64 bytes to store the hostname under the assumption that the maximum length value of hostname is 64 bytes, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.", "Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476)."]}, {"@Demonstrative_Example_ID": "DX-114", "Intro_Text": "In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:", "Example_Code": {"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:div": [{"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null], "xhtml:i": ["/* if chunk info is valid, return the size of usable memory,", "* else, return -1 to indicate an error", "*/"], "#text": "..."}}, {"@style": "margin-left:1em;", "xhtml:br": [null, null], "#text": "...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));..."}], "xhtml:br": null, "#text": "int returnChunkSize(void *) {}int main() {}"}}, "Body_Text": "If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788)."}, {"Intro_Text": "In the following example, the source character string is copied to the dest character string using the method strncpy.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...char source[21] = \"the character string\";char dest[12];strncpy(dest, source, sizeof(source)-1);..."}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...char source[21] = \"the character string\";char dest[12];strncpy(dest, source, sizeof(dest)-1);..."}}], "Body_Text": "However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below."}, {"Intro_Text": "In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "// saves the file name to a log file", "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null], "xhtml:i": ["// buffer with size set to maximum size for input to log file", "// copy filename to buffer", "// save to log file"], "#text": "int success;\n                           \n                           \n                           char buf[LOG_INPUT_SIZE];\n                           \n                           \n                           strncpy(buf, filename, length);\n                           \n                           \n                           success = saveToLogFile(buf);\n                           return success;"}}, "#text": "#define LOG_INPUT_SIZE 40\n                     \n                     \n                     int outputFilenameToLog(char *filename, int length) {}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "// copy filename to buffer", "#text": "...\n                     \n                     strncpy(buf, filename, sizeof(buf)-1);..."}}], "Body_Text": "However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below."}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2011-1959", "Description": "Chain: large length value causes buffer over-read (CWE-126)", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1959"}, {"Reference": "CVE-2011-1848", "Description": "Use of packet length field to make a calculation, then copy into a fixed-size buffer", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1848"}, {"Reference": "CVE-2011-0105", "Description": "Chain: retrieval of length value from an uninitialized memory location", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0105"}, {"Reference": "CVE-2011-0606", "Description": "Crafted length value in document reader leads to buffer overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0606"}, {"Reference": "CVE-2011-0651", "Description": "SSL server overflow when the sum of multiple length fields exceeds a given value", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0651"}, {"Reference": "CVE-2010-4156", "Description": "Language interpreter API function doesn't validate length argument, leading to information exposure", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4156"}]}, "Affected_Resources": {"Affected_Resource": "Memory"}, "Taxonomy_Mappings": {"Taxonomy_Mapping": {"@Taxonomy_Name": "CERT C Secure Coding", "Entry_ID": "ARR38-C", "Entry_Name": "Guarantee that library functions do not form invalid pointers", "Mapping_Fit": "Imprecise"}}, "Related_Attack_Patterns": {"Related_Attack_Pattern": [{"@CAPEC_ID": "100"}, {"@CAPEC_ID": "256"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-7", "@Section": "Chapter 6, \"Why ACLs Are Important\" Page 171"}, {"@External_Reference_ID": "REF-58"}, {"@External_Reference_ID": "REF-59"}, {"@External_Reference_ID": "REF-60"}, {"@External_Reference_ID": "REF-741"}, {"@External_Reference_ID": "REF-57"}, {"@External_Reference_ID": "REF-56"}, {"@External_Reference_ID": "REF-61"}, {"@External_Reference_ID": "REF-76"}, {"@External_Reference_ID": "REF-64"}, {"@External_Reference_ID": "REF-1332"}, {"@External_Reference_ID": "REF-1333"}, {"@External_Reference_ID": "REF-1334"}, {"@External_Reference_ID": "REF-1335"}, {"@External_Reference_ID": "REF-1336"}, {"@External_Reference_ID": "REF-1337", "@Section": "Memory information leaks"}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2010-01-15"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-04-05", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-06-21", "Modification_Comment": "updated Common_Consequences, Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-09-27", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2010-12-13", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-27", "Modification_Comment": "updated Demonstrative_Examples, Observed_Examples, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-09-13", "Modification_Comment": "updated Relationships, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Potential_Mitigations, References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-10-30", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-02-18", "Modification_Comment": "updated Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-06-23", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References, Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2018-03-27", "Modification_Comment": "updated References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-06-25", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-12-10", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Demonstrative_Examples, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description, Detection_Factors, Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Potential_Mitigations, References, Relationships"}]}}