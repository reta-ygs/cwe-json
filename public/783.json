{"@ID": "783", "@Name": "Operator Precedence Logic Error", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Draft", "Description": "The product uses an expression in which operator precedence causes incorrect logic to be used.", "Extended_Description": "While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.", "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "670", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Applicable_Platforms": {"Language": [{"@Name": "C", "@Prevalence": "Rarely"}, {"@Name": "C++", "@Prevalence": "Rarely"}, {"@Class": "Not Language-Specific", "@Prevalence": "Rarely"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation", "Note": "Logic errors related to operator precedence may cause problems even during normal operation, so they are probably discovered quickly during the testing phase. If testing is incomplete or there is a strong reliance on manual review of the code, then these errors may not be discovered before the software is deployed."}}, "Likelihood_Of_Exploit": "Low", "Common_Consequences": {"Consequence": {"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Varies by Context", "Unexpected State"], "Note": "The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state."}}, "Potential_Mitigations": {"Mitigation": {"Phase": "Implementation", "Description": "Regularly wrap sub-expressions in parentheses, especially in security-critical code."}}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "In the following example, the method validateUser makes a call to another method to authenticate a username and password for a user and returns a success or failure code.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null, null], "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null], "xhtml:i": ["// call method to authenticate username and password", "// if authentication fails then return failure otherwise return success"], "xhtml:div": [{"@style": "margin-left:1em;", "#text": "return isUser;"}, {"@style": "margin-left:1em;", "#text": "isUser = SUCCESS;"}], "#text": "int isUser = FAIL;\n                           \n                           \n                           \n                           \n                           \n                           if (isUser = AuthenticateUser(username, password) == FAIL) {}else {}\n                           return isUser;"}}, "#text": "#define FAIL 0#define SUCCESS 1\n                     ...\n                     int validateUser(char *username, char *password) {}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...\n                     if ((isUser = AuthenticateUser(username, password)) == FAIL) {\n                     ..."}}], "Body_Text": "However, the method that authenticates the username and password is called within an if statement with incorrect operator precedence logic. Because the comparison operator \"==\" has a higher precedence than the assignment operator \"=\", the comparison operator will be evaluated first and if the method returns FAIL then the comparison will be true, the return variable will be set to true and SUCCESS will be returned. This operator precedence logic error can be easily resolved by properly using parentheses within the expression of the if statement, as shown below."}, {"Intro_Text": "In this example, the method calculates the return on investment for an accounting/financial application. The return on investment is calculated by subtracting the initial investment costs from the current value and then dividing by the initial investment costs.", "Example_Code": [{"@Nature": "Bad", "@Language": "Java", "xhtml:div": {"xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null], "xhtml:i": "// calculate return on investment", "#text": "double returnROI = 0.0;\n                           \n                           \n                           returnROI = currentValue - initialInvestment / initialInvestment;\n                           return returnROI;"}}, "#text": "public double calculateReturnOnInvestment(double currentValue, double initialInvestment) {}"}}, {"@Nature": "Good", "@Language": "Java", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...\n                     returnROI = (currentValue - initialInvestment) / initialInvestment;\n                     ..."}}], "Body_Text": ["However, the return on investment calculation will not produce correct results because of the incorrect operator precedence logic in the equation. The divide operator has a higher precedence than the minus operator, therefore the equation will divide the initial investment costs by the initial investment costs which will only subtract one from the current value. Again this operator precedence logic error can be resolved by the correct use of parentheses within the equation, as shown below.", "Note that the initialInvestment variable in this example should be validated to ensure that it is greater than zero to avoid a potential divide by zero error (CWE-369)."]}]}, "Observed_Examples": {"Observed_Example": [{"Reference": "CVE-2008-2516", "Description": "Authentication module allows authentication bypass because it uses \"(x = call(args) == SUCCESS)\" instead of \"((x = call(args)) == SUCCESS)\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2516"}, {"Reference": "CVE-2008-0599", "Description": "Chain: Language interpreter calculates wrong buffer size (CWE-131) by using \"size = ptr ? X : Y\" instead of \"size = (ptr ? X : Y)\" expression.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0599"}, {"Reference": "CVE-2001-1155", "Description": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1155"}]}, "Taxonomy_Mappings": {"Taxonomy_Mapping": [{"@Taxonomy_Name": "CERT C Secure Coding", "Entry_ID": "EXP00-C", "Entry_Name": "Use parentheses for precedence of operation", "Mapping_Fit": "Exact"}, {"@Taxonomy_Name": "SEI CERT Perl Coding Standard", "Entry_ID": "EXP04-PL", "Entry_Name": "Do not mix the early-precedence logical operators with late-precedence logical operators", "Mapping_Fit": "CWE More Abstract"}]}, "References": {"Reference": [{"@External_Reference_ID": "REF-704"}, {"@External_Reference_ID": "REF-62", "@Section": "Chapter 6, \"Precedence\", Page 287"}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2009-07-16"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2009-12-28", "Modification_Comment": "updated Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-27", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Demonstrative_Examples, References, Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Taxonomy_Mappings, Time_of_Introduction"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-01-03", "Modification_Comment": "updated Taxonomy_Mappings"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2019-06-20", "Modification_Comment": "updated Type"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Relationships"}]}}