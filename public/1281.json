{"@ID": "1281", "@Name": "Sequence of Processor Instructions Leads to Unexpected Behavior", "@Abstraction": "Base", "@Structure": "Simple", "@Status": "Incomplete", "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.", "Extended_Description": {"xhtml:p": "If the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior.  Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security.  However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU."}, "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "691", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Applicable_Platforms": {"Language": {"@Class": "Not Language-Specific", "@Prevalence": "Undetermined"}, "Operating_System": {"@Class": "Not OS-Specific", "@Prevalence": "Undetermined"}, "Architecture": {"@Class": "Not Architecture-Specific", "@Prevalence": "Undetermined"}, "Technology": [{"@Class": "Not Technology-Specific", "@Prevalence": "Undetermined"}, {"@Name": "Processor Hardware", "@Prevalence": "Undetermined"}]}, "Modes_Of_Introduction": {"Introduction": [{"Phase": "Architecture and Design", "Note": "Unexpected behavior from certain instruction combinations can arise from bugs in the ISA"}, {"Phase": "Implementation", "Note": "Unexpected behavior from certain instruction combinations can arise because of implementation details such as speculative execution, caching etc."}]}, "Common_Consequences": {"Consequence": {"Scope": ["Integrity", "Availability"], "Impact": "Varies by Context"}}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Testing", "Description": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences."}, {"Phase": "Patching and Maintenance", "Description": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior.  See [REF-1108]."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "The Pentium F00F bug is a real-world example of how a sequence of instructions can lock a processor. The \"cmpxchg8b\" instruction compares contents of registers with a memory location.  The operand is expected to be a memory location, but in the bad code snippet it is the eax register. Because the specified operand is illegal, an exception is generated, which is the correct behavior and not a security issue in itself. However, when prefixed with the \"lock\" instruction, the processor deadlocks because locked memory transactions require a read and write pair of transactions to occur before the lock on the memory bus is released. The exception causes a read to occur but there is no corresponding write, as there would have been if a legal operand had been supplied to the cmpxchg8b instruction. [REF-1331]", "Example_Code": {"@Nature": "Bad", "@Language": "x86 Assembly", "#text": "lock cmpxchg8b eax"}}, {"Intro_Text": "The Cyrix Coma bug was capable of trapping a Cyrix 6x86, 6x86L, or 6x86MX processor in an infinite loop. An infinite loop on a processor is not necessarily an issue on its own, as interrupts could stop the loop. However, on select Cyrix processors, the x86 Assembly 'xchg' instruction was designed to prevent interrupts. On these processors, if the loop was such that a new 'xchg' instruction entered the instruction pipeline before the previous one exited, the processor would become deadlocked. [REF-1323]"}, {"Intro_Text": "The Motorola MC6800 microprocessor contained the first documented instance of a Halt and Catch Fire instruction - an instruction that causes the normal function of a processor to stop. If the MC6800 was given the opcode 0x9D or 0xDD, the processor would begin to read all memory very quickly, in sequence, and without executing any other instructions. This will cause the processor to become unresponsive to anything but a hard reset. [REF-1324]"}]}, "Observed_Examples": {"Observed_Example": {"Reference": "CVE-1999-1476", "Description": "A bug in some Intel Pentium processors allow DoS (hang) via an invalid \"CMPXCHG8B\" instruction, causing a deadlock", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1476"}}, "Related_Attack_Patterns": {"Related_Attack_Pattern": {"@CAPEC_ID": "212"}}, "References": {"Reference": [{"@External_Reference_ID": "REF-1094"}, {"@External_Reference_ID": "REF-1108"}, {"@External_Reference_ID": "REF-1323"}, {"@External_Reference_ID": "REF-1324"}, {"@External_Reference_ID": "REF-1331"}]}, "Content_History": {"Submission": {"Submission_Name": "Nicole Fern", "Submission_Organization": "Tortuga Logic", "Submission_Date": "2020-05-15"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-08-20", "Modification_Comment": "updated Related_Attack_Patterns"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-03-15", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Name, Observed_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2022-10-13", "Modification_Comment": "updated Applicable_Platforms, Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Demonstrative_Examples, Description, References, Relationships"}], "Previous_Entry_Name": {"@Date": "2021-07-20", "#text": "Sequence of Processor Instructions Leads to Unexpected Behavior (Halt and Catch Fire)"}}}