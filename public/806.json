{"@ID": "806", "@Name": "Buffer Access Using Size of Source Buffer", "@Abstraction": "Variant", "@Structure": "Simple", "@Status": "Incomplete", "Description": "The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "Extended_Description": "When the size of the destination is smaller than the size of the source, a buffer overflow could occur.", "Related_Weaknesses": {"Related_Weakness": {"@Nature": "ChildOf", "@CWE_ID": "805", "@View_ID": "1000", "@Ordinal": "Primary"}}, "Weakness_Ordinalities": {"Weakness_Ordinality": [{"Ordinality": "Resultant"}, {"Ordinality": "Primary"}]}, "Applicable_Platforms": {"Language": [{"@Name": "C", "@Prevalence": "Sometimes"}, {"@Name": "C++", "@Prevalence": "Sometimes"}]}, "Modes_Of_Introduction": {"Introduction": {"Phase": "Implementation"}}, "Common_Consequences": {"Consequence": [{"Scope": "Availability", "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)"], "Note": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Read Memory", "Modify Memory", "Execute Unauthorized Code or Commands"], "Note": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy."}, {"Scope": "Access Control", "Impact": "Bypass Protection Mechanism", "Note": "When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}]}, "Potential_Mitigations": {"Mitigation": [{"Phase": "Architecture and Design", "Description": "Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings."}, {"@Mitigation_ID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.", "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": {"xhtml:p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."}}, {"Phase": "Implementation", "Description": "Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions"}, {"@Mitigation_ID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.", "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.", "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}, {"@Mitigation_ID": "MIT-12", "Phase": "Operation", "Strategy": "Environment Hardening", "Description": {"xhtml:p": ["Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.", "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."]}, "Effectiveness": "Defense in Depth", "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."}, {"Phase": ["Build and Compilation", "Operation"], "Description": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution."}]}, "Demonstrative_Examples": {"Demonstrative_Example": [{"Intro_Text": "In the following example, the source character string is copied to the dest character string using the method strncpy.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...char source[21] = \"the character string\";char dest[12];strncpy(dest, source, sizeof(source)-1);..."}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null, null], "#text": "...char source[21] = \"the character string\";char dest[12];strncpy(dest, source, sizeof(dest)-1);..."}}], "Body_Text": "However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below."}, {"Intro_Text": "In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file.", "Example_Code": [{"@Nature": "Bad", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "// saves the file name to a log file", "xhtml:div": {"@style": "margin-left:1em;", "xhtml:div": {"xhtml:br": [null, null, null, null, null, null, null, null, null, null, null], "xhtml:i": ["// buffer with size set to maximum size for input to log file", "// copy filename to buffer", "// save to log file"], "#text": "int success;\n                           \n                           \n                           char buf[LOG_INPUT_SIZE];\n                           \n                           \n                           strncpy(buf, filename, length);\n                           \n                           \n                           success = saveToLogFile(buf);\n                           return success;"}}, "#text": "#define LOG_INPUT_SIZE 40\n                     \n                     \n                     int outputFilenameToLog(char *filename, int length) {}"}}, {"@Nature": "Good", "@Language": "C", "xhtml:div": {"xhtml:br": [null, null, null], "xhtml:i": "// copy filename to buffer", "#text": "...\n                     \n                     strncpy(buf, filename, sizeof(buf)-1);..."}}], "Body_Text": "However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below."}]}, "Affected_Resources": {"Affected_Resource": "Memory"}, "References": {"Reference": [{"@External_Reference_ID": "REF-56"}, {"@External_Reference_ID": "REF-57"}, {"@External_Reference_ID": "REF-58"}, {"@External_Reference_ID": "REF-59"}, {"@External_Reference_ID": "REF-60"}, {"@External_Reference_ID": "REF-61"}, {"@External_Reference_ID": "REF-64"}, {"@External_Reference_ID": "REF-1332"}, {"@External_Reference_ID": "REF-1333"}, {"@External_Reference_ID": "REF-1334"}, {"@External_Reference_ID": "REF-1335"}, {"@External_Reference_ID": "REF-1336"}, {"@External_Reference_ID": "REF-1337", "@Section": "Memory information leaks"}]}, "Content_History": {"Submission": {"Submission_Name": "CWE Content Team", "Submission_Organization": "MITRE", "Submission_Date": "2010-01-15"}, "Modification": [{"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-03-29", "Modification_Comment": "updated Demonstrative_Examples"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2011-06-01", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2012-05-11", "Modification_Comment": "updated Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2014-02-18", "Modification_Comment": "updated Potential_Mitigations, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2017-11-08", "Modification_Comment": "updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-02-24", "Modification_Comment": "updated Relationships"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2020-06-25", "Modification_Comment": "updated Common_Consequences"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2021-07-20", "Modification_Comment": "updated Potential_Mitigations"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-01-31", "Modification_Comment": "updated Description"}, {"Modification_Name": "CWE Content Team", "Modification_Organization": "MITRE", "Modification_Date": "2023-04-27", "Modification_Comment": "updated Potential_Mitigations, References, Relationships"}]}}